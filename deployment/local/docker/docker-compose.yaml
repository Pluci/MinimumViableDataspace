services:
  # EDC Connector to simulate a dataspace participant acting as a data provider which is located in EU.
  company1:
    container_name: company1
    build:
      context: ../../../launchers/connector
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    environment:
      EDC_DSP_CALLBACK_ADDRESS: http://company1:8282/api/dsp
      EDC_CONNECTOR_NAME: company1
      EDC_PARTICIPANT_ID: did:web:did-server:company1

      EDC_BLOBSTORE_ENDPOINT_TEMPLATE: "http://azurite:10000/%s"
      EDC_IDENTITY_DID_URL: did:web:did-server:company1
      EDC_VAULT: /resources/vault/company1/company1-vault.properties
      EDC_KEYSTORE: /resources/vault/company1/company1-keystore.jks
      EDC_SELF_DESCRIPTION_DOCUMENT_PATH: /resources/self-description/company1/sdd.json
      EDC_KEYSTORE_PASSWORD: test123
      EDC_API_AUTH_KEY: ApiKeyDefaultValue
      EDC_IAM_DID_WEB_USE_HTTPS: "false"
      EDC_CATALOG_CACHE_EXECUTION_DELAY_SECONDS: 5
      EDC_CATALOG_CACHE_EXECUTION_PERIOD_SECONDS: 5
      EDC_CATALOG_CACHE_PARTITION_NUM_CRAWLERS: 5
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: http://company1:8383/api/control/token
      REGISTRATION_SERVICE_API_URL: http://registration-service:8184/api/authority
      EDC_WEB_REST_CORS_ENABLED: "true"
      EDC_WEB_REST_CORS_HEADERS: "origin,content-type,accept,authorization,x-api-key"
    depends_on:
      - did-server
      - azurite
      - registration-service
      - postgres
    ports:
      - "9191:9191"
      - "8181:8181"
      - "5005:5005"
      - "7171:7171"
    volumes:
      - ./resources:/resources

  # EDC Connector to simulate a dataspace participant acting as a data consumer which is located in EU.
  company2:
    container_name: company2
    build:
      context: ../../../launchers/connector
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
    environment:
      EDC_DSP_CALLBACK_ADDRESS: http://company2:8282/api/dsp
      EDC_CONNECTOR_NAME: company2
      EDC_PARTICIPANT_ID: did:web:did-server:company2

      EDC_BLOBSTORE_ENDPOINT_TEMPLATE: "http://azurite:10000/%s"
      EDC_IDENTITY_DID_URL: did:web:did-server:company2
      EDC_VAULT: /resources/vault/company2/company2-vault.properties
      EDC_KEYSTORE: /resources/vault/company2/company2-keystore.jks
      EDC_SELF_DESCRIPTION_DOCUMENT_PATH: /resources/self-description/company2/sdd.json
      EDC_KEYSTORE_PASSWORD: test123
      EDC_API_AUTH_KEY: ApiKeyDefaultValue
      EDC_IAM_DID_WEB_USE_HTTPS: "false"
      EDC_CATALOG_CACHE_EXECUTION_DELAY_SECONDS: 5
      EDC_CATALOG_CACHE_EXECUTION_PERIOD_SECONDS: 5
      EDC_CATALOG_CACHE_PARTITION_NUM_CRAWLERS: 5
      EDC_DATAPLANE_TOKEN_VALIDATION_ENDPOINT: http://company2:8383/api/control/token
      REGISTRATION_SERVICE_API_URL: http://registration-service:8184/api/authority
      EDC_WEB_REST_CORS_ENABLED: "true"
      EDC_WEB_REST_CORS_HEADERS: "origin,content-type,accept,authorization,x-api-key"
    depends_on:
      - did-server
      - azurite
      - registration-service
      - postgres
    ports:
      - "9192:9191"
      - "8182:8181"
      - "5006:5006"
      - "7172:7171"
    volumes:
      - ./resources:/resources

  # A nginx based HTTP server to serve dataspace participants DIDs.
  did-server:
    container_name: did-server
    image: nginx
    volumes:
      - ./resources/webdid:/usr/share/nginx/html
    ports:
      - "7070:80"

  # Azure blob storage simulator.
  azurite:
    container_name: azurite
    image: mcr.microsoft.com/azure-storage/azurite
    ports:
      - 10000:10000
    environment:
      AZURITE_ACCOUNTS: company1assets:key1;company2assets:key2;

  # Dataspace registration service authority.
  registration-service:
    container_name: registration-service
    build:
      #e.g. /home/user/RegistrationService/launcher
      context: ../../../launchers/registrationservice
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008"
    environment:
      JWT_AUDIENCE: http://registration-service:8184/api/authority
      EDC_IAM_DID_WEB_USE_HTTPS: "false"
      EDC_CONNECTOR_NAME: registration-service
      EDC_IDENTITY_DID_URL: did:web:did-server:registration-service
      EDC_SELF_DESCRIPTION_DOCUMENT_PATH: /resources/self-description/registration-service/sdd.json
      EDC_VAULT: /resources/vault/registration-service/registration-service-vault.properties
      EDC_KEYSTORE: /resources/vault/registration-service/registration-service-keystore.jks
      EDC_KEYSTORE_PASSWORD: test123
      EDC_ERROR_RESPONSE_VERBOSE: "true"
    depends_on:
      - postgres
    ports:
      - "8184:8184"
      - "8185:8181"
      - "5008:5008"
      - "7174:7171"
    volumes:
      - ./resources:/resources

  # Data Dashboard (MVD UI) for participant company1
  company1-datadashboard:
    container_name: company1-datadashboard
    build:
      context: ${MVD_UI_PATH}
    volumes:
      - ./resources/appconfig/company1:/usr/share/nginx/html/assets/config
    depends_on:
      company1:
        condition: service_healthy
    ports:
      - "7080:80"
    profiles: ["ui"]

    # Data Dashboard (MVD UI) for participant company2
  company2-datadashboard:
    container_name: company2-datadashboard
    build:
      context: ${MVD_UI_PATH}
    volumes:
      - ./resources/appconfig/company2:/usr/share/nginx/html/assets/config
    depends_on:
      company2:
        condition: service_healthy
    ports:
      - "7081:80"
    profiles: ["ui"]

  # Add the PostgreSQL container to be used by DataspaceConnectorA and DataspaceConnectorB
  postgres:
    image: postgres:13
    container_name: 'postgres-container'
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=companyconnectordb
    volumes:
      - ../postgres/data:/var/lib/postgresql/data
      - ./postgres/script/connector/init-asset.sql:/docker-entrypoint-initdb.d/init-asset.sql
      - ./postgres/script/connector/init-policy-definitions.sql:/docker-entrypoint-initdb.d/init-policy-definitions.sql
      - ./postgres/script/connector/init-contract-definition.sql:/docker-entrypoint-initdb.d/init-contract-definition.sql
      - ./postgres/script/connector/init-contract-negotiation.sql:/docker-entrypoint-initdb.d/init-contract-negotiation.sql
      - ./postgres/script/connector/init-transfer-process.sql:/docker-entrypoint-initdb.d/init-transfer-process.sql