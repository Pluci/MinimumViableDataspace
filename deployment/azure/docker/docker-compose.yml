version: "3.9"
services:

  # EDC Connector to simulate a dataspace participant acting as a data provider which is located in EU.
  company1:
    container_name: company1
    build:
      context: ../../../launchers/connector
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    env_file:
      - company1.env
    depends_on:
      - registration-service
      - postgres-company-1
    ports:
      - "9191:9191"
      - "8181:8181"
      - "5005:5005"
      - "7171:7171"
    volumes:
      - ../resources/self-description/company1:/resources

  # EDC Connector to simulate a dataspace participant acting as a data consumer which is located in EU.
  company2:
    container_name: company2
    build:
      context: ../../../launchers/connector
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5006"
    env_file:
      - company2.env
    depends_on:
      - registration-service
      - postgres-company-2
    ports:
      - "9192:9191"
      - "8182:8181"
      - "5006:5006"
      - "7172:7171"
    volumes:
      - ../resources/self-description/company2:/resources

  # EDC Connector to simulate a dataspace participant acting as a consumer which is located in US.
  company3:
    container_name: company3
    build:
      context: ../../../launchers/connector
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5007"
    env_file:
      - company3.env
    depends_on:
      - registration-service
      - postgres-company-3
    ports:
      - "9193:9191"
      - "8183:8181"
      - "5007:5007"
      - "7173:7171"
    volumes:
      - ../resources/self-description/company3:/resources

  # Dataspace registration service authority.
  registration-service:
    container_name: registration-service
    build:
      # e.g. /home/user/RegistrationService/launcher
      context: ../../../launchers/registrationservice
      args:
        JVM_ARGS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5008"
    env_file: reg.env
    depends_on:
      - postgres-registration-service
    ports:
      - "8184:8184"
      - "8185:8181"
      - "5008:5008"
      - "7174:7171"
    volumes:
      - ../resources/self-description/registration-service:/resources

  # Data Dashboard (MVD UI) for participant company1
  company1-datadashboard:
    container_name: company1-datadashboard
    build:
      context: ../../system-tests/DataDashboard
    volumes:
      - ../resources/appconfig/company1:/usr/share/nginx/html/assets/config
    depends_on:
      company1:
        condition: service_healthy
    ports:
      - "7080:80"
    profiles: [ "ui" ]

  # Data Dashboard (MVD UI) for participant company2
  company2-datadashboard:
    container_name: company2-datadashboard
    build:
      context: ../../system-tests/DataDashboard
    volumes:
      - ../resources/appconfig/company2:/usr/share/nginx/html/assets/config
    depends_on:
      company2:
        condition: service_healthy
    ports:
      - "7081:80"
    profiles: [ "ui" ]

  # Data Dashboard (MVD UI) for participant company3
  company3-datadashboard:
    container_name: company3-datadashboard
    build:
      context: ../../system-tests/DataDashboard
    volumes:
      - ../resources/appconfig/company3:/usr/share/nginx/html/assets/config
    depends_on:
      company3:
        condition: service_healthy
    ports:
      - "7082:80"
    profiles: [ "ui" ]

  # PostgreSQL container for registration service
  postgres-registration-service:
    image: postgres:13
    container_name: postgres-registration-service-container
    ports:
      - "5432:5432"
    healthcheck:
      # Check is the database ready
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgresuser -d mvd_db'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    env_file:
      - postgres.env
    volumes:
      - ../resources/database/registration-service:/var/lib/postgresql/data
      - ../resources/postgres-init-script/init-identityhub.sql:/docker-entrypoint-initdb.d/init-identityhub.sql
      - ../resources/postgres-init-script/init-participant.sql:/docker-entrypoint-initdb.d/init-participant.sql

  # PostgreSQL container for company1
  postgres-company-1:
    image: postgres:13
    container_name: postgres-registration-service-container
    ports:
      - "5432:5432"
    healthcheck:
      # Check is the database ready
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgresuser -d mvd_db'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    env_file:
      - postgres.env
    volumes:
      - ../resources/database/registration-service:/var/lib/postgresql/data
      - ../resources/postgres-init-script/init-asset.sql:/docker-entrypoint-initdb.d/init-asset.sql
      - ../resources/postgres-init-script/init-contract-definitions.sql:/docker-entrypoint-initdb.d/init-contract-definitions.sql
      - ../resources/postgres-init-script/init-contract-negotiation.sql:/docker-entrypoint-initdb.d/init-contract-negotiations.sql
      - ../resources/postgres-init-script/init-policy-definitions.sql:/docker-entrypoint-initdb.d/init-policy-definitions.sql
      - ../resources/postgres-init-script/init-transfer-process.sql:/docker-entrypoint-initdb.d/init-transfer-process.sql
      - ../resources/postgres-init-script/init-identityhub.sql:/docker-entrypoint-initdb.d/init-identityhub.sql

  # PostgreSQL container for company2
  postgres-company-2:
    image: postgres:13
    container_name: postgres-registration-service-container
    ports:
      - "5432:5432"
    healthcheck:
      # Check is the database ready
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgresuser -d mvd_db'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    env_file:
      - postgres.env
    volumes:
      - ../resources/database/registration-service:/var/lib/postgresql/data
      - ../resources/postgres-init-script/init-asset.sql:/docker-entrypoint-initdb.d/init-asset.sql
      - ../resources/postgres-init-script/init-contract-definitions.sql:/docker-entrypoint-initdb.d/init-contract-definitions.sql
      - ../resources/postgres-init-script/init-contract-negotiation.sql:/docker-entrypoint-initdb.d/init-contract-negotiations.sql
      - ../resources/postgres-init-script/init-policy-definitions.sql:/docker-entrypoint-initdb.d/init-policy-definitions.sql
      - ../resources/postgres-init-script/init-transfer-process.sql:/docker-entrypoint-initdb.d/init-transfer-process.sql
      - ../resources/postgres-init-script/init-identityhub.sql:/docker-entrypoint-initdb.d/init-identityhub.sql

  # PostgreSQL container for company3
  postgres-company-3:
    image: postgres:13
    container_name: postgres-registration-service-container
    ports:
      - "5432:5432"
    healthcheck:
      # Check is the database ready
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgresuser -d mvd_db'" ]
      interval: 10s
      timeout: 3s
      retries: 3
    env_file:
      - postgres.env
    volumes:
      - ../resources/database/registration-service:/var/lib/postgresql/data
      - ../resources/postgres-init-script/init-asset.sql:/docker-entrypoint-initdb.d/init-asset.sql
      - ../resources/postgres-init-script/init-contract-definitions.sql:/docker-entrypoint-initdb.d/init-contract-definitions.sql
      - ../resources/postgres-init-script/init-contract-negotiation.sql:/docker-entrypoint-initdb.d/init-contract-negotiations.sql
      - ../resources/postgres-init-script/init-policy-definitions.sql:/docker-entrypoint-initdb.d/init-policy-definitions.sql
      - ../resources/postgres-init-script/init-transfer-process.sql:/docker-entrypoint-initdb.d/init-transfer-process.sql
      - ../resources/postgres-init-script/init-identityhub.sql:/docker-entrypoint-initdb.d/init-identityhub.sql